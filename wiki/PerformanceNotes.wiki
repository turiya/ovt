#summary Notes on performance and possible improvements

Notes from issue 16:

First test results:
{{{
4.376273s render 100k points
4.792301s render 100k points in frame
1.156071s render 100k path
3.396213s render 100k path in frame
}}}

I'm puzzled that frame rendering slows paths much more than points. My first guess
was that transformations have something to do with it. If I change
transform_scene_node to return the node without transforming it, the path falls back
in line:
{{{
4.096256s render 100k points
4.320270s render 100k points in frame
1.132072s render 100k path
1.192074s render 100k path in frame
}}}

Nulling out cairo drawing for paths drops the time to near zero:
{{{
0.000000s render 100k path
0.064004s render 100k path in frame
}}}

Without making cairo faster, it looks like all I can do for paths is improve
transformation time.

Disabling antialiasing makes paths about .3s faster.

Cutting out cairo drawing for points drops the time significantly:
{{{
0.224014s render 100k points
0.432027s render 100k points in frame
}}}

Drawing the point shapes might significantly slower than drawing paths, but since I represent points individually but the entire path as a single primitive, this could also be the cause. I'll change path to render point shapes to test it out:
{{{
4.084254s render 100k points
4.308270s render 100k points in frame
3.856241s render 100k path
3.924245s render 100k path in frame
}}}

Drawing all 100k points to a path before filling caused cairo to run out of memory die, so this represents a compromise where I make paths for 1000 points before filling and continuing on. Looks like this is just slow. Since I'm duplicating the same shape, is there a way to render once and copy to each location?

Possibilities
 * Copy the path with cairo_copy_path and render it back with cairo_append_path. This might be good if cairo_arc is the problem, and bad if filling is still slow.
 * Draw the shape to a group, pop the group as a source, and paint it back in different places.

Making the path is fast, but drawing operations are slow. With a bit of fiddling, the second idea works quite well. Instead of popping the group as source, I need to pop it and reset it after each translation to to the new point location, but it's fast:
{{{
1.396088s render 100k path
1.844115s render 100k path in frame
}}}

Here transformations are turned back on and paths are rendering point shapes instead of a true path. If I rewrite point as a set, it should be almost as fast as path.